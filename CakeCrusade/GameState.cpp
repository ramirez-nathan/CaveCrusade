#include "GameState.hpp"
#include <string> 
#include <algorithm>
#include "Enemy.hpp"
#include "Player.hpp"
#include "Soldier.hpp"
#include "Enemy.hpp"
#include "Slime.hpp"
#include "Skeleton.hpp"

using namespace std;

GameState::GameState()
{ 
    LevelHeight = 14;
    LevelWidth = 23;
    tileset = "assets/tilemap/tileset1.png";
    CurrLevelName = "1a";
    hasSpikes = false;
}

bool GameState::loadLevel() // Checks if the new level has been successfully loaded
{
    if (!Map.load(tileset, sf::Vector2u(16, 16), CurrentLevel, LevelWidth, LevelHeight)) 
        return false;
    else 
        return true;
}


void GameState::changeLevel(string levelName, Player& p, string type, SoundFx& s, vector<unique_ptr<Enemy>>& enemies) // Changes the level based on door type and current level
{
    /*---------------------------------------------- Level 1 -------------------------------------------------*/
    
    if (type == "door") {
        if (levelName == "debug") {
            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

        }

        else if (levelName == "1a") { // go to room 1b
            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 19, 20, 21, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7, 22, 23, 24,  7,  7,  7,  7,  7, 44,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0, 25, 26, 27,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  6,   7,  7,  7,  7,  7, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0, 43,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   2,  3, 43,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   4,  5, 43,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 45, 46, 47, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

        CurrLevelName = "1b";
        p.changePosition(1250.f, 750.f);
        try { 
            enemies.push_back(make_unique<Soldier>(200.f, 50.f, 50.f, 0.17f, 0.5f)); // give diff speeds to avoid complete overlapping
            enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f)); 
        } 
        catch (const bad_alloc& e) { 
            std::cerr << "Memory allocation failed: " << e.what() << std::endl; 
        } 
        vector<sf::Vector2f> enemyPositions1b = { 
            sf::Vector2f(1170.f, 261.f), // Soldier1 position 
            sf::Vector2f(484.f, 586.f), // Skeleton1 position 
        }; 
        for (size_t i = 0; i < enemies.size(); ++i) { 
            enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y); 
        } 
        for (auto& enemy : enemies) {
            enemy->initialize();
            enemy->load();
        }
    } 

        else if (levelName == "1b") { // go to room 1d
            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  8, 18, 18, 18, 18, 18, 18, 18, 18, 18,  6,  7,  7,  7,  7,  8, 18,
                 18,  9,   0,  0,  0,  0, 10, 18, 18, 18, 19, 20, 21, 18, 18, 18,  9,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 39,  7,  7,  7, 22, 23, 24,  7,  7,  7, 40,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 25, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 45, 46, 47, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "1d";
            p.changePosition(739.f, 750.f);
            try {
                enemies.push_back(make_unique<Soldier>(200.f, 50.f, 50.f, 0.17f, 0.5f)); // give diff speeds to avoid complete overlapping
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
            }
            catch (const bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
            }
            vector<sf::Vector2f> enemyPositions1b = {
                sf::Vector2f(739.f, 394.f), // Soldier1 position 
                sf::Vector2f(251.f, 220.f), // Skeleton1 position 
                sf::Vector2f(1219.f, 220.f) // Skeleton2 position 
            };
            for (size_t i = 0; i < enemies.size(); ++i) {
                enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y);
            }
            for (auto& enemy : enemies) {
                enemy->initialize();
                enemy->load();
            }
        }

        /*---------------------------------------------- Level 2 -------------------------------------------------*/

        else if (levelName == "1d") { // change to 2a
            tileset = "assets/tilemap/tileset2.png"; // changes level color !! :) 

            s.loadMusic("sound/music/icycave.wav");
            
            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7,  8, 18,  6,  7,  7,  7,  7, 22, 23, 24,  7,  8, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 10, 18,  9,  0,  0,  0,  0, 25, 26, 27,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 10, 18,  9,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 10, 18,  9,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 39,  7, 40,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 41, 12, 42,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 10, 18,  9,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 10, 18,  9,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 10, 18,  9,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 45, 46, 47, 12, 12, 12, 12, 13, 18, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "2a";
            p.changePosition(291.f, 750.f);
            try {
                enemies.push_back(make_unique<Soldier>(200.f, 50.f, 50.f, 0.17f, 0.5f)); // give diff speeds to avoid complete overlapping
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
            }
            catch (const bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
            }
            vector<sf::Vector2f> enemyPositions1b = {
                sf::Vector2f(293.f, 326.f), // Soldier1 position 
                sf::Vector2f(1160.f, 702.f) // Skeleton1 position 
            };
            for (size_t i = 0; i < enemies.size(); ++i) {
                enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y);
            }
            for (auto& enemy : enemies) {
                enemy->initialize();
                enemy->load();
            }
        }

        else if (levelName == "2a") { // change to 2b 

            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7, 22, 23, 24,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0, 25, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 28, 30, 28, 29, 28, 50, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 34, 50, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 18, 50, 18,
                 18,  9,   2,  3,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 34, 18, 18, 50, 18,
                 18,  9,   4,  5,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 33, 18, 18, 18, 18, 50, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 33, 50, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 33, 18, 18, 18, 50, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 34, 18, 50, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0, 34, 18, 18, 18, 18, 50, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 45, 46, 47, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            hasSpikes = true;

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "2b";
            p.changePosition(739.f, 750.f);
            try {
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
            }
            catch (const bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
            }
            vector<sf::Vector2f> enemyPositions1b = {
                sf::Vector2f(227.f, 703.f), // Skeleton1 position 
                sf::Vector2f(227.f, 254.f) // Skeleton2 position 
            };
            for (size_t i = 0; i < enemies.size(); ++i) {
                enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y);
            }
            for (auto& enemy : enemies) {
                enemy->initialize();
                enemy->load();
            }
        }

        else if (levelName == "2b") { // change to 2d 

            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7, 22, 23, 24,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0, 25, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0, 28, 28, 32, 28,  0,  0,  0,  0,  0,  0,  0, 28, 28, 28, 31,  0,  0, 10, 18,
                 18,  9,   0,  0, 18, 33, 18, 18,  0,  0,  0,  0,  0,  0,  0, 18, 34, 18, 18,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0, 31, 28, 28, 28,  0,  0,  0,  0,  0,  0,  0, 28, 28, 32, 28,  0,  0, 10, 18,
                 18,  9,   0,  0, 18, 18, 34, 18,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 33,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 45, 46, 47, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "2d";
            p.changePosition(739.f, 750.f);
            try {
                enemies.push_back(make_unique<Soldier>(200.f, 50.f, 50.f, 0.15f, 0.5f)); // give diff speeds to avoid complete overlapping
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
                enemies.push_back(make_unique<Skeleton>(150.f, 20.f, 20.f, 0.0f));
                enemies.push_back(make_unique<Slime>(300.f, 10.f, 5.f, 0.035f));
            }
            catch (const bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
            }
            vector<sf::Vector2f> enemyPositions1b = {
                sf::Vector2f(738.f, 253.f), // Soldier1 position - make bigger soldier 
                sf::Vector2f(1246.f, 222.f), // Skeleton1 position
                sf::Vector2f(228.f, 222.f), // Skeleton2 position
                sf::Vector2f(738.f, 475.f) // Slime1 position
            };
            for (size_t i = 0; i < enemies.size(); ++i) {
                enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y);
            }
            for (auto& enemy : enemies) {
                enemy->initialize();
                enemy->load();
            }
        }

            /*---------------------------------------------- Level 3 -------------------------------------------------*/


            /*---------------------------------------------- Level 4 -------------------------------------------------*/
        

    }


    /*---------------------------------------------- Stairs -------------------------------------------------*/


    else if (type == "stair") {

        if (levelName == "1b") { // go to 1c
            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   2,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   4,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0, 28, 28, 32, 28, 31, 28, 18,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0, 18, 33, 18, 18, 18, 18, 18,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0, 34, 18, 18, 34, 18, 18, 18,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 18, 33, 18,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "1c";
            p.changePosition(290.f, 180.f);
            try {
                enemies.push_back(make_unique<Soldier>(200.f, 50.f, 50.f, 0.17f, 0.5f)); // give diff speeds to avoid complete overlapping
                enemies.push_back(make_unique<Soldier>(200.f, 50.f, 50.f, 0.13f, 0.5f));
            }
            catch (const bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
            }
            vector<sf::Vector2f> enemyPositions1b = {
                sf::Vector2f(258.f, 687.f), // Soldier1 position 
                sf::Vector2f(1220.f, 243.f) // Soldier2 position
            };
            for (size_t i = 0; i < enemies.size(); ++i) {
                enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y);
            }
            for (auto& enemy : enemies) {
                enemy->initialize();
                enemy->load();
            }
        }

        else if (levelName == "1c") { // go back to 1b
            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 19, 20, 21, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7, 22, 23, 24,  7,  7,  7,  7,  7, 44,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0, 25, 26, 27,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  6,   7,  7,  7,  7,  7, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0, 43,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   2,  3, 43,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   4,  5, 43,  0,  0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 45, 46, 47, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "1b";
            p.changePosition(193.f, 616.f);
        }

        /*---------------------------------------------- Level 2 -------------------------------------------------*/

        else if (levelName == "2c") { // go back to 2b

            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7, 22, 23, 24,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0, 25, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 28, 30, 28, 29, 28, 50, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 34, 50, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 18, 50, 18,
                 18,  9,   2,  3,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 34, 18, 18, 50, 18,
                 18,  9,   4,  5,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 33, 18, 18, 18, 18, 50, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 18, 33, 50, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 33, 18, 18, 18, 50, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 18, 34, 18, 50, 18,
                 18,  9,   0,  0,  0,  0, 49,  0,  0,  0,  0,  0,  0,  0,  0,  0, 34, 18, 18, 18, 18, 50, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 45, 46, 47, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "2b";
            p.changePosition(284.f, 456.f);

        }

        else if (levelName == "2b") { // change to 2c

            int NewLevel[23 * 14] =
            {
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                 18,  6,   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  3, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  5, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  9,   0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
                 18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
                 18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
            };

            hasSpikes = true; 

            std::copy(std::begin(NewLevel), std::end(NewLevel), std::begin(CurrentLevel));

            CurrLevelName = "2c";
            p.changePosition(1187.f, 456.f);
            try {
                enemies.push_back(make_unique<Slime>(300.f, 10.f, 5.f, 0.035f)); // give diff speeds to avoid complete overlapping
            }
            catch (const bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
            }
            vector<sf::Vector2f> enemyPositions1b = {
                sf::Vector2f(544.f, 471.f) // Slime1 position 
            };
            for (size_t i = 0; i < enemies.size(); ++i) {
                enemies[i]->changePosition(enemyPositions1b[i].x, enemyPositions1b[i].y);
            }
            for (auto& enemy : enemies) {
                enemy->initialize();
                enemy->load();
            }
        }
    }
}


/*
int NewLevel[23 * 14] =
        {
             18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
             18,  6,   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  9,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 18,
             18,  11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 18,
             18,  18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
        };



*/


